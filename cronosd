#!/bin/bash

LANG=en_us_88591

declare -a msg

loadconf () {
	local real=$(realpath $0)
	base=$(dirname $real)
	source $base/cronos.conf
}

push () {
	if [[ $debug == 'true' ]]; then
		echo "$1"
	else
		msg=("${msg[@]}" "$1")
	fi
}

sendmsg () {
	dd if=/tmp/cronosp iflag=nonblock of=/dev/null >/dev/null 2>&1

	for m in "${msg[@]}"; do
		echo -e "$m " > /tmp/cronosp
	done

	[[ ${#msg[@]} -eq 0 ]] && echo " " > /tmp/cronosp
}

quit () {
	[[ $debug == 'true' ]] && echo "quiting ..."
	exit $1
}

dialogo () {
	zenity --question \
			    --title="Alarm" \
			    --text "<span foreground=\"#ccc\" font=\"32\">$payload</span>" \
			    --timeout="$(($tm_dismiss * 60))" \
			    --ok-label="Finish" \
			    --cancel-label="Snooze" \
			    --icon-name="clock" \
			  	--window-icon="clock.png" \
			    2>/dev/null

	if [[ $? -eq 0 ]]; then
		[[ ! -z $background_process ]] && kill $background_process
		quit 0	 
	else 
		date_jst=$(date +"%Y%m%d%H%M" -d "+$tm_rep min")
	fi	
}

function time_diff() {
	d1=$(date -u -d "$1" +"%s")
	d2=$(date -u -d "$2" +"%s")

	date -u -d "0 $d2 sec - $d1 sec" +"%H:%M:%S"
}

abs_path () {
	path="$1"

	local real=$(realpath $0)
	base=$(dirname $real)

	if [[ "${path:0:1}" == "/" ]]; then
		echo "$path"
		return
	else
		realpath "$base/$path"
		return
	fi
}

playsound () {
	args=$@
	file=${args[@]}

	format=`file "$file" | cut -d: -f2`

	# mp4 / wav
	if [[ ! -z `which cvlc` ]]; then
		cvlc "$file" >/dev/null 2>&1 &
		return
	fi	

	# mp3 / wav / oog
	if [[ ! -z `which ffplay` ]]; then
		ffplay -nodisp -autoexit "$file" >/dev/null 2>&1 &
		return
	fi	

	case "$format" in
		*RIFF*) # wav
		[[ ! -z `which aplay` ]] && aplay "$file" >/dev/null 2>&1 &
		;;

		*MPEG*) # mp3
		[[ ! -z `which mpeg123` ]] && mpeg123 "$file" >/dev/null 2>&1 &
		;;
	esac
}

_alarm () {
	local cuando
	#local type

	case $1 in
		__COMMAND__)
			type="$1"; shift
			[[ ${#1} -eq 5 ]] && cuando="$1" || cuando="0$1"
			shift 2
			payload="$@"
			#push "When: $cuando"
			push "Command: $payload"	
		;;
		__SCRIPT__)
			type="$1"; shift
			[[ ${#1} -eq 5 ]] && cuando="$1" || cuando="0$1"
			shift 2
			payload="$@"
			#push "When: $cuando"
			push "Script: script $payload"
		;;
		*)	
			type="__ALARM__"
			[[ ${#1} -eq 5 ]] && cuando="$1" || cuando="0$1"
			shift
			
			mute=off
			case "$1" in
				-m|--mute)
					mute=on
					shift 
				;;
			esac
			
			[[ "$1" == '-t' ]] || [[ "$1" == '--text' ]] && shift
			payload="$@"
			
			#push "When: $cuando"
			push "Alarm text: $payload"
		;;
	esac

	cuando=${cuando/24:/00:}
	_ahora=$(date | cut -d' ' -f2-)
	

	# Hoy o mañana 
	now=$(date +%H:%M)

	if [[ "$cuando" > "$now" ]]; then
		day="today"
		fecha=$(date --date="$cuando" | cut -f 2- -d ' ')
		
		date_ant=$(date +"%Y%m%d%H%M" -d "$fecha -$tm_ant min")
		date_dsp=$(date +"%Y%m%d%H%M" -d "$fecha +$tm_dsp min") 
		_hasta=$(date -d "$fecha -$tm_ant min" | cut -f 2- -d ' ') 	
	else
		# necesito sumar 1 día
		day="tomorrow"
		fecha=$(date --date="$cuando" | cut -f 2- -d ' ')

		date_ant=$(date +"%Y%m%d%H%M" -d "$fecha +1 day -$tm_ant min")
		date_dsp=$(date +"%Y%m%d%H%M" -d "$fecha +1 day +$tm_dsp min")
		_hasta=$(date -d "$fecha +1 day -$tm_ant min" | cut -d' ' -f2-)
	fi


	# Posibilito que la alarma se dispare antes
	date_jst=$date_ant

	ahora=$(date +"%Y%m%d%H%M");
	if [[ ! "$ahora" < "$date_jst" ]]; then
		zenity --question \
			    --title="Alarm" \
			    --text "<span foreground=\"#ccc\" font=\"30\">Tomorrow?</span>" \
			    --timeout="$(($tm_dismiss * 60))" \
			    --ok-label="Yes" \
			    --cancel-label="No" \
			    --icon-name="clock" \
			  	--window-icon="clock.png" \
			  	--height=150 --width=200 \
			    2>/dev/null

		if [[ $? -eq 0 ]]; then
			date_jst=$(date -d  "+1 day -5 min")
		else 
		    push "Aborted ***"
		    sendmsg
		    quit 1
		fi	
	fi	

	#####################################
	diff=$(time_diff "$_ahora" "$_hasta")

	#push "$_ahora ][ $_hasta"
	push "Time to accomplish: $day in $diff"

	pid=$$
	echo -e "$pid\t$_hasta\t${type//__/}\t$payload" >> /tmp/cronosq
	#####################################

	daemon
}

daemon () {
	sendmsg

	while [[ "$ahora" < "$date_jst" ]]; do
		ahora=$(date +"%Y%m%d%H%M")

		if [[ ! "$ahora" < "$date_jst" ]] && [[ "$ahora" < "$date_dsp" ]]; then  

			case $type in
				__COMMAND__)
					bash -c "$payload"
					quit 0
				;;
				__SCRIPT__)
					source "$payload"
					quit 0
				;;
				*)
					[[ $mute != 'on' ]] && playsound $(abs_path "$sound")
					background_process=$!
					dialogo
				;; 
			esac
		fi

		sleep $ts_update
	done  
}

#
# Load default values
#
loadconf

_alarm "$@"
quit
