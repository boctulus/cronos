#!/bin/bash

version=0.3

quit () {
	dd if=/tmp/cronosp iflag=nonblock of=/dev/null >/dev/null 2>&1
	exit
}

options () 
{
	help=$(cat <<-TEXT

	$(basename $0) - schedule a task or create an alarm

	Usage:
	
	    $(basename $0) <time> <options> [-m] [-t] <text> 
	    $(basename $0) <time> <options> -c <command> 
	    $(basename $0) <time> <options> -f <script file> 

	Options:

	 -m, --mute                     no sound
	 
	 -t, --text                     text for alarm
	 -c, --command                  command to be executed
	 -f, --file                     script file
	 -s, --script                   same as -f
	 
	 -l, --list                     list all tasks / alarms
	 -r, --remove                   remove an specific task or alarm 
	 -d, --delete                   same as --remove
	 -a, --all                      remove all tasks / alarms

	 -h, --help                     display this help
	 -v, --version                  display version
TEXT
)

	case "$1" in
	-v|--version)
	  	echo "$(basename $0) version $version"
	  	return
		;;
	-h|--help)
		echo -e "$help"
		return
		;;
	[0-9][0-9]:[0-9][0-9]|[0-9]:[0-9][0-9])
		residente="$base/cronosd"

		case "$2" in
			-c|--command|--cmd)
			nohup $residente "__COMMAND__" "$@" >/dev/null 2>&1 &
			shift
			;;
			-f|--file|-s|--script)
			nohup $residente "__SCRIPT__" "$@" >/dev/null 2>&1 &
			shift
			;;
			-t|--text)
			nohup $residente "$@" >/dev/null 2>&1 &
			;;
			*)
			nohup $residente "$@" >/dev/null 2>&1 &
		esac
			cat < /tmp/cronosp
		;;		
	-l|--list)
		declare -a jobs

		# Sino no hay cronos, limpio la lista
		[[ -z `pgrep ^cronosd$` ]] && { false > /tmp/cronosq; echo "There are no jobs"; quit 0;}	

		jobs_str=$(cat /tmp/cronosq)
		explode "$jobs_str" $'\n' jobs

		echo -e "#\t PID\t DATETIME\t\tTYPE\t\t PAYLOAD"

		local ix=1
		local _pid
		for job in "${jobs[@]}"; do
			load=$(echo -e "$job" | cut -d$'\t' -f4) 
			_pid=$(echo "$job" | grep -o ^[0-9]*)
			
			# Si el crono no existe lo borro de la lista
			if [[ -z $(ps -p $_pid | grep ' cronosd$') ]]; then
				sed -i "/^$_pid\t/d" /tmp/cronosq
				continue
			fi
			
			echo -e "$job" | awk -v carga="$load" -v ix=$ix '{print ix,"\t",$1,"\t",$2,$3,$4,$6,"\t[",$7,"]\t",carga}'
			(( ix++ ))
		done		
		;;
	-a|--all|--clear)
		echo "cleared ***"
		pkill ^cronosd$
		false > /tmp/cronosq
		;;
	-r|--remove|-d|--delete|-e|--erase|-k|--kill)
		[[ -z $2 ]] && { echo 'Error: argument is missed'; quit 1; }

		if [[ ! -z $(ps -p $2 | grep ' cronosd$') ]]; then
			kill $2 2>/dev/null
			if [[ $? -eq 0 ]]; then	
				sed -i "/^$2\t/d" /tmp/cronosq
				echo "A crono was killed"
				quit 0
			else		
				echo "An error has occurred. PID $2 could not be killed"
				quit 1
			fi
		else
			echo "Crono not found with PID $2"
			quit 1
		fi		
	;;
	*)		
		if [[ $# -eq 0 ]]; then
			echo -e "$help"
		else
			echo -e "$(basename $0): Unrecognized option '$1'\nTry '$(basename $0) --help' for more information";
		fi 
		return
		;;
	esac
}

# Path del proyecto
real=$(realpath $0)
base=$(dirname $real)

# Cargo biblioteca
source $base/libs

# Creo tuberÃ­a nombrada o la limpio
[[ ! -p /tmp/cronosp ]] && mkfifo /tmp/cronosp || dd if=/tmp/cronosp iflag=nonblock of=/dev/null >/dev/null 2>&1

# Creo registro
[[ ! -f /tmp/cronosq ]] && touch /tmp/cronosq
 
# Posibilito formato AM / PM
case "$2" in 
	AM)
		p1="$1"
		hh=$(echo $1 | cut -d: -f1)

		[[ $hh -gt 12 ]] && { echo "$(basename $0): invalid time format !"; quit 1; }

		shift 2
		resto="$@"
		params=($p1 ${resto[@]})
		options ${params[@]}
	;;
	PM)
		p1="$1"
		hh=$(echo $1 | cut -d: -f1)
		mm=$(echo $1 | cut -d: -f2)

		[[ $hh -gt 12 ]] && { echo "$(basename $0): invalid time format !"; exit 1; }

		shift 2
		resto="$@"
		params=("$(($hh+12)):$mm" ${resto[@]})

		options ${params[@]}
		;;
	*)
		options "$@"	
esac

quit


