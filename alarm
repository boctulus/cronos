#!/bin/bash

#
# Alarma
#
# Ej de uso:
#
# nohup alarm 16:05 Dragon Ball &  
#
#

version=0.1
tm_ant=5 		# margen inferior
tm_dsp=10		# margen superior
tm_rep=5 		# tiempo para repetición
tm_dismiss=60   # 1 hora


dialogo () {
	zenity --question \
			    --title="Alarma" \
			    --text "<span foreground=\"#ccc\" font=\"32\">$text</span>" \
			    --timeout="$(($tm_dismiss * 60))" \
			    --ok-label="Cerrar" \
			    --cancel-label="Recordar en 5 min" \
			    --icon-name="clock" \
			  	--window-icon="/usr/share/icons/Mint-X/apps/16/clock.png" \
			    2>/dev/null

	[[ $? -eq 1 ]] && date_jst=$(date +"%Y%m%d%H%M" -d "+$tm_rep min") || exit 0
}

_alarm () {
	local cuando
	local comando
	local text
	local type

	case $1 in
		command)
			type="$1"; shift
			cuando="$1"
			shift 2
			comando="$@"
			echo "Cuando: $cuando"
			echo "Ejecutando $comando"	
		;;
		script)
			type="$1"; shift
			cuando="$1"
			shift 2
			file="$@"
			echo "Cuando: $cuando"
			echo "Ejecutando script $file"
		;;
		*)
			cuando="$1"
			shift
			[[ "$1" == '-t' ]] || [[ "$1" == '--text' ]] && shift
			text="$@"
			echo "Cuando: $cuando"
			echo "Texto: $text"
		;;
	esac
	
	# Hoy o mañana 
	now=$(date +%H:%M)

	if [[ "$cuando" > "$now" ]]; then
		set -- $(date)
		shift; fecha="$@"
	else
		set -- $(date -d "next day")
		shift; fecha="$@"
	fi

	#echo "$fecha"

	t_futuro=$(echo $fecha | awk -v hora="$cuando" '{print $1, $2, hora,  $4, $5}')
	date_ant=$(date +"%Y%m%d%H%M" -d "$t_futuro -$tm_ant min")

	# Fecha en el futuro
	date_dsp=$(date +"%Y%m%d%H%M" -d "$t_futuro +$tm_dsp min") 
	      
	# Posibilito que la alarma se dispare antes
	date_jst=$date_ant

	ahora=$(date +"%Y%m%d%H%M"); 

	if [[ ! "$ahora" < "$date_jst" ]]; then
		zenity --question \
			    --title="Alarma" \
			    --text "<span foreground=\"#ccc\" font=\"30\">Es para mañana?</span>" \
			    --timeout="$(($tm_dismiss * 60))" \
			    --ok-label="Si" \
			    --cancel-label="No" \
			    --icon-name="clock" \
			  	--window-icon="/usr/share/icons/Mint-X/apps/16/clock.png" \
			  	--height=150 --width=200 \
			    2>/dev/null

		if [[ $? -eq 0 ]]; then
			date_jst=$(date -d  "+1 day -5 min")
			echo Programada para $date_jst
		else 
			zenity --info \
			    --title="Alarma" \
			    --text "<span foreground=\"#ccc\" font=\"30\">Abortando ...</span>" \
			    --timeout=3 \
			    --ok-label="Ok" \
			    --icon-name="clock" \
			  	--window-icon="/usr/share/icons/Mint-X/apps/16/clock.png" \
			  	--height=150 --width=200 \
			    2>/dev/null

			    exit
		fi	
	fi	

	#echo \$date_dsp = "$date_dsp"
	#echo \$date_jst = "$date_jst"

	#while [[ "$ahora" < "$date_dsp" ]]; do
		while [[ "$ahora" < "$date_jst" ]]; do
			ahora=$(date +"%Y%m%d%H%M")
			echo "Ahora: $(date +"%Y-%m-%d %H:%M") y esperando que sea $date_jst"
			echo "Maximo para ejecucion: $date_dsp"

			if [[ ! "$ahora" < "$date_jst" ]] && [[ "$ahora" < "$date_dsp" ]]; then  
				echo "Siendo $ahora se dispara *** "

				case $type in
					command)
						bash -c "$comando"
						exit
					;;
					script)
						source "$file"
						exit
					;;
					*)
						dialogo
						;; 
				esac

				if [[ "$type" == "_command" ]]; then
					bash -c "$comando"
					exit
				else	
					dialogo
				fi
			fi

			sleep 59
		done  
	#done

}


options () 
{
	help=$(cat <<-TEXT

	Usage:
	 $(basename $0) <time> <options> [-t] <text> 
	 $(basename $0) <time> <options> -c <command> 
	 $(basename $0) <time> <options> -f <script file> 

	Schedule a task or create an alarm

	Options:
	 -v, --verbose                  show detailed information
	 -m, --mute                     no sound (not implemented)
	 
	 -t, --text                     text for alarm
	 -c, --command                  command to be executed
	 -f, --file                     script file
	 -s, --script                   same as -f
	 
	 -h, --help                     display this help
	 -V, --version                  display version

TEXT
)

	verbose=

	case "$1" in
	-v|--verbose)
	    verbose=1
	    shift 1
	    ;;
	esac

	case "$1" in
	-V|--version)
	  	echo "$(basename $0) version $version"
	  	return
		;;
	-h|--help)
		echo -e "$help"
		return
		;;
	[0-9][0-9]:[0-9][0-9])
		case "$2" in
			-c|--command|--cmd)
			_alarm "command" "$@"
			shift
			;;
			-f|--file|-s|--script)
			_alarm "script" "$@"
			shift
			;;
			-t|--text)
			_alarm "$@"
			;;
			*)
			_alarm "$@"
		esac
		;;		
	*)		
		if [[ $# -eq 0 ]]; then
			echo -e "$help"
		else
			echo -e "$(basename $0): Unrecognized option '$1'\nTry '$(basename $0) --help' for more information";
		fi 
		return
		;;
	esac
}

options "$@"



